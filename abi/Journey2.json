{
  "address": "0xcdFe3d7eBFA793675426F150E928CD395469cA53",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lordsPerRealm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_halvingAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_halvingAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_realmsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lordsToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "StakeRealms",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "UnStakeRealms",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "boardShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "bridgeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLengh",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "exitShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getNumberRealms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeUntilEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "halvingAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "halvingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "lordsAvailable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lords",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRealms",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "lordsIssuance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lordsPerRealm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lordsToken",
      "outputs": [
        {
          "internalType": "contract LordsToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "realmsStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realmsToken",
      "outputs": [
        {
          "internalType": "contract RealmsToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_finalAge",
          "type": "uint256"
        }
      ],
      "name": "setFinalAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setGenesis",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setGracePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_halvingAge",
          "type": "uint256"
        }
      ],
      "name": "setHalvingAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_halvingAmount",
          "type": "uint256"
        }
      ],
      "name": "setHalvingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newEpoch",
          "type": "uint256"
        }
      ],
      "name": "updateEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLords",
          "type": "address"
        }
      ],
      "name": "updateLordsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRealms",
          "type": "address"
        }
      ],
      "name": "updateRealmsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        }
      ],
      "name": "withdrawAllLords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x11c1a1edee02cc7658826312229644fc50003b13a94ccb8c65e3b34eeda52038",
  "receipt": {
    "to": null,
    "from": "0xd3344596BF243331636B6FCA4724E2A6A901ee90",
    "contractAddress": "0xcdFe3d7eBFA793675426F150E928CD395469cA53",
    "transactionIndex": 21,
    "gasUsed": "3600211",
    "logsBloom": "0x
    "blockHash": "0x45a132d1a2fd426ec22e03179f8e09f5a5c4d57e88e4aa1f5bc433e12d070079",
    "transactionHash": "0x11c1a1edee02cc7658826312229644fc50003b13a94ccb8c65e3b34eeda52038",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 14271548,
        "transactionHash": "0x11c1a1edee02cc7658826312229644fc50003b13a94ccb8c65e3b34eeda52038",
        "address": "0xcdFe3d7eBFA793675426F150E928CD395469cA53",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3344596bf243331636b6fca4724e2a6a901ee90"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x45a132d1a2fd426ec22e03179f8e09f5a5c4d57e88e4aa1f5bc433e12d070079"
      }
    ],
    "blockNumber": 14271548,
    "cumulativeGasUsed": "5821069",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "312500000000000000000",
    1,
    5,
    "175000000000000000000",
    "0x7AFe30cB3E53dba6801aa0EA647A0EcEA7cBe18d",
    "0x686f2404e77Ab0d9070a46cdfb0B7feCDD2318b0"
  ],
  "numDeployments": 1,
  "solcInputHash": "a617067c5b6883f6837dcaf4c07e8c4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lordsPerRealm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_realmsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lordsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"StakeRealms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"UnStakeRealms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"boardShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bridgeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLengh\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"exitShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getNumberRealms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeUntilEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"lordsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lords\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealms\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"lordsIssuance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lordsPerRealm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lordsToken\",\"outputs\":[{\"internalType\":\"contract LordsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"realmsStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realmsToken\",\"outputs\":[{\"internalType\":\"contract RealmsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalAge\",\"type\":\"uint256\"}],\"name\":\"setFinalAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_halvingAge\",\"type\":\"uint256\"}],\"name\":\"setHalvingAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_halvingAmount\",\"type\":\"uint256\"}],\"name\":\"setHalvingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEpoch\",\"type\":\"uint256\"}],\"name\":\"updateEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLords\",\"type\":\"address\"}],\"name\":\"updateLordsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRealms\",\"type\":\"address\"}],\"name\":\"updateRealmsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"withdrawAllLords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"boardShip(uint256[])\":{\"params\":{\"_tokenIds\":\"Ids of Realms\"}},\"bridgeWithdraw(address,uint256[])\":{\"params\":{\"_tokenIds\":\"Ids of Realms\"}},\"exitShip(uint256[])\":{\"params\":{\"_tokenIds\":\"Ids of Realms\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"boardShip(uint256[])\":{\"notice\":\"Boards the Ship (Stakes). Sets ownership of Token to Staker. Transfers NFT to Contract. Set's epoch date, Set's number of Realms staked in the Epoch.\"},\"bridgeWithdraw(address,uint256[])\":{\"notice\":\"Called only by future Bridge contract to withdraw the Realms\"},\"claimLords()\":{\"notice\":\"Claims all available Lords for Owner.\"},\"exitShip(uint256[])\":{\"notice\":\"Exits the Ship\"},\"lordsAvailable(address)\":{\"notice\":\"Lords available for the player\"},\"withdrawAllLords(address)\":{\"notice\":\"Withdraw all Lords\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pre/Journey.sol\":\"Journey\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x483b106386dd309f168672928252a19f30c30efb4d17d4b8e2b0f587ca784a11\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x42c041cfe2fba75264baa64c4c3c55b128e6667b54331df87028cc4da0a9606e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x56aa86fb8deb7ab08fe01ec07c80ef4d9da52d401150ceba523dab9efdd54fb4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/pre/Journey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"../shared/interfaces/RealmsToken.sol\\\";\\nimport \\\"../shared/interfaces/LordsToken.sol\\\";\\n\\ncontract Journey is ERC721Holder, Ownable, ReentrancyGuard, Pausable {\\n    // -------- EVENTS -------- //\\n    event StakeRealms(uint256[] tokenIds, address player);\\n    event UnStakeRealms(uint256[] tokenIds, address player);\\n\\n    // -------- MAPPINGS -------- //\\n    mapping(address => uint256) public epochClaimed;\\n    mapping(uint256 => address) public ownership;\\n    mapping(address => mapping(uint256 => uint256)) public realmsStaked;\\n\\n    // -------- PUBLIC ---------- //\\n    LordsToken public lordsToken;\\n    RealmsToken public realmsToken;\\n    address public bridge;\\n    uint256 public lordsPerRealm;\\n    uint256 public genesis;\\n    uint256 public epoch;\\n    uint256 public finalAge;\\n    uint256 public halvingAge;\\n    uint256 public halvingAmount;\\n    uint256 public gracePeriod;\\n\\n    uint256 public epochLengh = 3600;\\n\\n    constructor(\\n        uint256 _lordsPerRealm,\\n        uint256 _epoch,\\n        uint256 _halvingAge,\\n        uint256 _halvingAmount,\\n        address _realmsAddress,\\n        address _lordsToken\\n    ) {\\n        lordsPerRealm = _lordsPerRealm;\\n        epoch = _epoch;\\n        halvingAge = _halvingAge;\\n        halvingAmount = _halvingAmount;\\n        lordsToken = LordsToken(_lordsToken);\\n        realmsToken = RealmsToken(_realmsAddress);\\n    }\\n\\n    // -------- EXTERNALS -------- //\\n\\n    function setGracePeriod(uint256 _gracePeriod) external onlyOwner {\\n        gracePeriod = _gracePeriod;\\n    }\\n\\n    function setGenesis(uint256 _time) external onlyOwner {\\n        genesis = _time;\\n    }\\n\\n    function lordsIssuance(uint256 _new) external onlyOwner {\\n        lordsPerRealm = _new;\\n    }\\n\\n    function updateRealmsAddress(address _newRealms) external onlyOwner {\\n        realmsToken = RealmsToken(_newRealms);\\n    }\\n\\n    function updateLordsAddress(address _newLords) external onlyOwner {\\n        lordsToken = LordsToken(_newLords);\\n    }\\n\\n    function updateEpochLength(uint256 _newEpoch) external onlyOwner {\\n        epoch = _newEpoch;\\n    }\\n\\n    function setBridge(address _newBridge) external onlyOwner {\\n        bridge = _newBridge;\\n    }\\n\\n    function setHalvingAmount(uint256 _halvingAmount) external onlyOwner {\\n        halvingAmount = _halvingAmount;\\n    }\\n\\n    function setHalvingAge(uint256 _halvingAge) external onlyOwner {\\n        halvingAge = _halvingAge;\\n    }\\n\\n    function setFinalAge(uint256 _finalAge) external onlyOwner {\\n        finalAge = _finalAge;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Boards the Ship (Stakes). Sets ownership of Token to Staker. Transfers NFT to Contract. Set's epoch date, Set's number of Realms staked in the Epoch.\\n     * @param _tokenIds Ids of Realms\\n     */\\n    function boardShip(uint256[] memory _tokenIds)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(\\n                realmsToken.ownerOf(_tokenIds[i]) == msg.sender,\\n                \\\"NOT_OWNER\\\"\\n            );\\n            ownership[_tokenIds[i]] = msg.sender;\\n\\n            realmsToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _tokenIds[i]\\n            );\\n        }\\n\\n        if (getNumberRealms(msg.sender) == 0) {\\n            epochClaimed[msg.sender] = _epochNum();\\n        }\\n\\n        realmsStaked[msg.sender][_epochNum()] += uint256(_tokenIds.length);\\n\\n        emit StakeRealms(_tokenIds, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Exits the Ship\\n     * @param _tokenIds Ids of Realms\\n     */\\n    function exitShip(uint256[] memory _tokenIds)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        _exitShip(_tokenIds);\\n    }\\n\\n    /**\\n     * @notice Claims all available Lords for Owner.\\n     */\\n    function claimLords() external whenNotPaused nonReentrant {\\n        _claimLords();\\n    }\\n\\n    // -------- INTERNALS -------- //\\n\\n    /**\\n     * @notice Set's epoch = epoch * 1 hour.\\n     */\\n    function _epochNum() internal view returns (uint256) {\\n        if (finalAge != 0) {\\n            return finalAge;\\n        } else if (block.timestamp - genesis < gracePeriod) {\\n            return 0;\\n        } else if ((block.timestamp - genesis) / (epoch * epochLengh) == 0) {\\n            return 1;\\n        } else {\\n            return (block.timestamp - genesis) / (epoch * epochLengh) + 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exits Ship, and transfers all Realms back to owner. Claims any lords available.\\n     * @param _tokenIds Ids of Realms\\n     */\\n    function _exitShip(uint256[] memory _tokenIds) internal {\\n        (uint256 lords, ) = lordsAvailable(msg.sender);\\n\\n        if (lords != 0) {\\n            _claimLords();\\n        }\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(ownership[_tokenIds[i]] == msg.sender, \\\"NOT_OWNER\\\");\\n\\n            ownership[_tokenIds[i]] = address(0);\\n\\n            realmsToken.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                _tokenIds[i]\\n            );\\n        }\\n\\n        // Remove last in first\\n        if (_epochNum() == 0) {\\n            realmsStaked[msg.sender][_epochNum()] -= _tokenIds.length;\\n        } else {\\n            uint256 realmsInPrevious = realmsStaked[msg.sender][\\n                _epochNum() - 1\\n            ];\\n            uint256 realmsInCurrent = realmsStaked[msg.sender][_epochNum()];\\n\\n            if (realmsInPrevious > _tokenIds.length) {\\n                realmsStaked[msg.sender][_epochNum() - 1] -= _tokenIds.length;\\n            } else if (realmsInCurrent == _tokenIds.length) {\\n                realmsStaked[msg.sender][_epochNum()] -= _tokenIds.length;\\n            } else if (realmsInPrevious <= _tokenIds.length) {\\n                // remove oldest first\\n                uint256 oldestFirst = (_tokenIds.length - realmsInPrevious);\\n\\n                realmsStaked[msg.sender][_epochNum() - 1] -= (_tokenIds.length -\\n                    oldestFirst);\\n\\n                realmsStaked[msg.sender][_epochNum()] -= oldestFirst;\\n            }\\n        }\\n\\n        emit UnStakeRealms(_tokenIds, msg.sender);\\n    }\\n\\n    function _claimLords() internal {\\n        require(_epochNum() > 1, \\\"GENESIS_epochNum\\\");\\n\\n        (uint256 lords, uint256 totalRealms) = lordsAvailable(msg.sender);\\n\\n        // set totalRealms staked in latest epoch - 1 so loop doesn't have to iterate again\\n        realmsStaked[msg.sender][_epochNum() - 1] = totalRealms;\\n\\n        // set epoch claimed to current - 1\\n        epochClaimed[msg.sender] = _epochNum() - 1;\\n\\n        require(lords > 0, \\\"NOTHING_TO_CLAIM\\\");\\n\\n        lordsToken.approve(address(this), lords);\\n\\n        lordsToken.transferFrom(address(this), msg.sender, lords);\\n    }\\n\\n    // -------- GETTERS -------- //\\n\\n    /**\\n     * @notice Lords available for the player\\n     */\\n    function lordsAvailable(address _player)\\n        public\\n        view\\n        returns (uint256 lords, uint256 totalRealms)\\n    {\\n        uint256 preHalvingRealms;\\n        uint256 postHalvingRealms;\\n\\n        for (uint256 i = epochClaimed[_player]; i < _epochNum(); i++) {\\n            totalRealms += realmsStaked[_player][i];\\n        }\\n\\n        if (epochClaimed[_player] <= halvingAge && _epochNum() <= halvingAge) {\\n            for (uint256 i = epochClaimed[_player]; i < _epochNum(); i++) {\\n                preHalvingRealms +=\\n                    realmsStaked[_player][i] *\\n                    ((_epochNum() - 1) - i);\\n            }\\n        } else if (\\n            _epochNum() >= halvingAge && epochClaimed[_player] < halvingAge\\n        ) {\\n            for (uint256 i = epochClaimed[_player]; i < halvingAge; i++) {\\n                preHalvingRealms +=\\n                    realmsStaked[_player][i] *\\n                    ((halvingAge) - i);\\n            }\\n        }\\n\\n        if (_epochNum() > halvingAge && epochClaimed[_player] >= halvingAge) {\\n            for (uint256 i = epochClaimed[_player]; i < _epochNum(); i++) {\\n                postHalvingRealms +=\\n                    realmsStaked[_player][i] *\\n                    ((_epochNum() - 1) - i);\\n            }\\n        } else if (\\n            _epochNum() > halvingAge && epochClaimed[_player] < halvingAge\\n        ) {\\n            uint256 total;\\n\\n            for (uint256 i = epochClaimed[_player]; i < _epochNum(); i++) {\\n                total += realmsStaked[_player][i] * ((_epochNum() - 1) - i);\\n\\n                if (i < halvingAge) {\\n                    total -= realmsStaked[_player][i] * ((halvingAge) - i);\\n                }\\n            }\\n\\n            postHalvingRealms = total;\\n        }\\n\\n        if (_epochNum() > 1) {\\n            lords =\\n                (lordsPerRealm * preHalvingRealms) +\\n                (halvingAmount * postHalvingRealms);\\n        } else {\\n            lords = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw all Lords\\n     */\\n    function withdrawAllLords(address _destination) public onlyOwner {\\n        uint256 balance = lordsToken.balanceOf(address(this));\\n        lordsToken.approve(address(this), balance);\\n        lordsToken.transferFrom(address(this), _destination, balance);\\n    }\\n\\n    function getEpoch() public view returns (uint256) {\\n        return _epochNum();\\n    }\\n\\n    function getTimeUntilEpoch() public view returns (uint256) {\\n        return\\n            (epoch * epochLengh * (getEpoch())) - (block.timestamp - genesis);\\n    }\\n\\n    function getNumberRealms(address _player) public view returns (uint256) {\\n        uint256 totalRealms;\\n\\n        if (_epochNum() >= 1) {\\n            for (uint256 i = epochClaimed[_player]; i <= _epochNum(); i++) {\\n                totalRealms += realmsStaked[_player][i];\\n            }\\n            return totalRealms;\\n        } else {\\n            return realmsStaked[_player][0];\\n        }\\n    }\\n\\n    // -------- MODIFIERS -------- //\\n    modifier onlyBridge() {\\n        require(msg.sender == bridge, \\\"NOT_THE_BRIDGE\\\");\\n        _;\\n    }\\n\\n    // -------- BRIDGE FUNCTIONS -------- //\\n    /**\\n     * @notice Called only by future Bridge contract to withdraw the Realms\\n     * @param _tokenIds Ids of Realms\\n     */\\n    function bridgeWithdraw(address _player, uint256[] memory _tokenIds)\\n        public\\n        onlyBridge\\n    {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            ownership[_tokenIds[i]] = address(0);\\n            realmsToken.safeTransferFrom(address(this), _player, _tokenIds[i]);\\n        }\\n        emit UnStakeRealms(_tokenIds, _player);\\n    }\\n}\\n\",\"keccak256\":\"0x4f10e5e1b6decc8b0b1ed824ef9cf4f04c3f6cbe6430510654d65c1c36660cbb\",\"license\":\"MIT\"},\"contracts/shared/interfaces/LordsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface LordsToken is IERC20 {}\\n\",\"keccak256\":\"0x079da90b9d58ed24e635284564501c1cf4e9bf2f1f59b27ed9b568e6be8c694f\",\"license\":\"MIT\"},\"contracts/shared/interfaces/RealmsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface RealmsToken is IERC721Enumerable {\\n\\n}\\n\",\"keccak256\":\"0x029f5860d9ba6e170c4578b2ae6660dd85a0f0347655b9f70b094a11084cabc0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052610e106010553480156200001757600080fd5b5060405162003fbb38038062003fbb83398181016040528101906200003d91906200029a565b6200005d620000516200012960201b60201c565b6200013160201b60201c565b600180819055506000600260006101000a81548160ff0219169083151502179055508560098190555084600b8190555083600d8190555082600e8190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000336565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6200020f81620001fa565b81146200021b57600080fd5b50565b6000815190506200022f8162000204565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002628262000235565b9050919050565b620002748162000255565b81146200028057600080fd5b50565b600081519050620002948162000269565b92915050565b60008060008060008060c08789031215620002ba57620002b9620001f5565b5b6000620002ca89828a016200021e565b9650506020620002dd89828a016200021e565b9550506040620002f089828a016200021e565b94505060606200030389828a016200021e565b93505060806200031689828a0162000283565b92505060a06200032989828a0162000283565b9150509295509295509295565b613c7580620003466000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80638da5cb5b1161013b578063bb1eb778116100b8578063eb31736e1161007c578063eb31736e1461066c578063f2f6596014610688578063f2fde38b146106a4578063f85be745146106c0578063fb3914d7146106de57610248565b8063bb1eb778146105ee578063c5882923146105f8578063c640855c14610614578063d26ef38d14610630578063e78cea921461064e57610248565b806393ff8d10116100ff57806393ff8d10146105365780639a5bfa2c14610566578063a06db7dc14610582578063a0f45b69146105a0578063a7f0b3de146105d057610248565b80638da5cb5b146104a45780638dd14802146104c2578063900cf0cf146104de57806391d4416b146104fc5780639378438e1461051a57610248565b80635aae426e116101c9578063715018a61161018d578063715018a614610438578063757991a8146104425780637a6aa76a146104605780637eac76211461047e5780638456cb591461049a57610248565b80635aae426e146103a85780635c975abb146103c65780636709de4f146103e45780636978b29614610400578063714f480e1461041c57610248565b80633699b2b2116102105780633699b2b2146103035780633dc524ce146103345780633f4ba83a146103525780634717607b1461035c5780635048a1361461037857610248565b80630f330b661461024d578063150b7a021461026957806317546065146102995780631b2cd65e146102c95780632f087501146102e7575b600080fd5b61026760048036038101906102629190612f92565b6106fc565b005b610283600480360381019061027e91906130ee565b610afb565b60405161029091906131ac565b60405180910390f35b6102b360048036038101906102ae91906131c7565b610b0f565b6040516102c09190613216565b60405180910390f35b6102d1610b34565b6040516102de9190613216565b60405180910390f35b61030160048036038101906102fc9190612f92565b610b3a565b005b61031d60048036038101906103189190613231565b610be3565b60405161032b92919061325e565b60405180910390f35b61033c6112aa565b6040516103499190613216565b60405180910390f35b61035a6112b0565b005b61037660048036038101906103719190613287565b611336565b005b610392600480360381019061038d9190613231565b6113bc565b60405161039f9190613216565b60405180910390f35b6103b06113d4565b6040516103bd9190613216565b60405180910390f35b6103ce611415565b6040516103db91906132cf565b60405180910390f35b6103fe60048036038101906103f99190613287565b61142c565b005b61041a60048036038101906104159190613287565b6114b2565b005b61043660048036038101906104319190613231565b611538565b005b61044061179c565b005b61044a611824565b6040516104579190613216565b60405180910390f35b610468611833565b6040516104759190613349565b60405180910390f35b61049860048036038101906104939190613287565b611859565b005b6104a26118df565b005b6104ac611965565b6040516104b99190613373565b60405180910390f35b6104dc60048036038101906104d79190613231565b61198e565b005b6104e6611a4e565b6040516104f39190613216565b60405180910390f35b610504611a54565b6040516105119190613216565b60405180910390f35b610534600480360381019061052f9190613287565b611a5a565b005b610550600480360381019061054b9190613231565b611ae0565b60405161055d9190613216565b60405180910390f35b610580600480360381019061057b9190613287565b611c1a565b005b61058a611ca0565b6040516105979190613216565b60405180910390f35b6105ba60048036038101906105b59190613287565b611ca6565b6040516105c79190613373565b60405180910390f35b6105d8611cd9565b6040516105e59190613216565b60405180910390f35b6105f6611cdf565b005b610612600480360381019061060d919061338e565b611d86565b005b61062e60048036038101906106299190613231565b611f8b565b005b61063861204b565b6040516106459190613216565b60405180910390f35b610656612051565b6040516106639190613373565b60405180910390f35b61068660048036038101906106819190613231565b612077565b005b6106a2600480360381019061069d9190613287565b612137565b005b6106be60048036038101906106b99190613231565b6121bd565b005b6106c86122b5565b6040516106d59190613216565b60405180910390f35b6106e66122bb565b6040516106f3919061340b565b60405180910390f35b610704611415565b15610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90613483565b60405180910390fd5b6002600154141561078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906134ef565b60405180910390fd5b600260018190555060005b81518110156109eb573373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8484815181106108065761080561350f565b5b60200260200101516040518263ffffffff1660e01b815260040161082a9190613216565b602060405180830381865afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190613553565b73ffffffffffffffffffffffffffffffffffffffff16146108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b8906135cc565b60405180910390fd5b33600460008484815181106108d9576108d861350f565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e33308585815181106109805761097f61350f565b5b60200260200101516040518463ffffffff1660e01b81526004016109a6939291906135ec565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b5050505080806109e390613652565b915050610795565b5060006109f733611ae0565b1415610a4957610a056122e1565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8051600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610a946122e1565b81526020019081526020016000206000828254610ab1919061369b565b925050819055507f486ed571da4f82b733e4a2b512dd11f25f1213e6d66b6bc78812b03ff3320d768133604051610ae99291906137af565b60405180910390a16001808190555050565b600063150b7a0260e01b9050949350505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600e5481565b610b42611415565b15610b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7990613483565b60405180910390fd5b60026001541415610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf906134ef565b60405180910390fd5b6002600181905550610bd981612389565b6001808190555050565b6000806000806000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b610c366122e1565b811015610cae57600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000205484610c99919061369b565b93508080610ca690613652565b915050610c2e565b50600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411158015610d095750600d54610d066122e1565b11155b15610e02576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b610d5b6122e1565b811015610dfc57806001610d6d6122e1565b610d7791906137df565b610d8191906137df565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054610ddc9190613813565b83610de7919061369b565b92508080610df490613652565b915050610d53565b50610f3b565b600d54610e0d6122e1565b10158015610e5b5750600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15610f3a576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b600d54811015610f385780600d54610ebd91906137df565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054610f189190613813565b83610f23919061369b565b92508080610f3090613652565b915050610ea5565b505b5b600d54610f466122e1565b118015610f945750600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561108d576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b610fe66122e1565b81101561108757806001610ff86122e1565b61100291906137df565b61100c91906137df565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020546110679190613813565b82611072919061369b565b9150808061107f90613652565b915050610fde565b50611261565b600d546110986122e1565b1180156110e55750600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561126057600080600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b6111386122e1565b81101561125a5780600161114a6122e1565b61115491906137df565b61115e91906137df565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020546111b99190613813565b826111c4919061369b565b9150600d548110156112475780600d546111de91906137df565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020546112399190613813565b8261124491906137df565b91505b808061125290613652565b915050611130565b50809150505b5b600161126b6122e1565b111561129e5780600e5461127f9190613813565b8260095461128d9190613813565b611297919061369b565b93506112a3565b600093505b5050915091565b600d5481565b6112b861293a565b73ffffffffffffffffffffffffffffffffffffffff166112d6611965565b73ffffffffffffffffffffffffffffffffffffffff161461132c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611323906138b9565b60405180910390fd5b611334612942565b565b61133e61293a565b73ffffffffffffffffffffffffffffffffffffffff1661135c611965565b73ffffffffffffffffffffffffffffffffffffffff16146113b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a9906138b9565b60405180910390fd5b80600e8190555050565b60036020528060005260406000206000915090505481565b6000600a54426113e491906137df565b6113ec611824565b601054600b546113fc9190613813565b6114069190613813565b61141091906137df565b905090565b6000600260009054906101000a900460ff16905090565b61143461293a565b73ffffffffffffffffffffffffffffffffffffffff16611452611965565b73ffffffffffffffffffffffffffffffffffffffff16146114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f906138b9565b60405180910390fd5b80600d8190555050565b6114ba61293a565b73ffffffffffffffffffffffffffffffffffffffff166114d8611965565b73ffffffffffffffffffffffffffffffffffffffff161461152e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611525906138b9565b60405180910390fd5b8060098190555050565b61154061293a565b73ffffffffffffffffffffffffffffffffffffffff1661155e611965565b73ffffffffffffffffffffffffffffffffffffffff16146115b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ab906138b9565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116119190613373565b602060405180830381865afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165291906138ee565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b81526004016116b192919061391b565b6020604051808303816000875af11580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190613970565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3084846040518463ffffffff1660e01b8152600401611754939291906135ec565b6020604051808303816000875af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190613970565b505050565b6117a461293a565b73ffffffffffffffffffffffffffffffffffffffff166117c2611965565b73ffffffffffffffffffffffffffffffffffffffff1614611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f906138b9565b60405180910390fd5b61182260006129e4565b565b600061182e6122e1565b905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61186161293a565b73ffffffffffffffffffffffffffffffffffffffff1661187f611965565b73ffffffffffffffffffffffffffffffffffffffff16146118d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cc906138b9565b60405180910390fd5b80600a8190555050565b6118e761293a565b73ffffffffffffffffffffffffffffffffffffffff16611905611965565b73ffffffffffffffffffffffffffffffffffffffff161461195b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611952906138b9565b60405180910390fd5b611963612aa8565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61199661293a565b73ffffffffffffffffffffffffffffffffffffffff166119b4611965565b73ffffffffffffffffffffffffffffffffffffffff1614611a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a01906138b9565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b5481565b60105481565b611a6261293a565b73ffffffffffffffffffffffffffffffffffffffff16611a80611965565b73ffffffffffffffffffffffffffffffffffffffff1614611ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acd906138b9565b60405180910390fd5b80600c8190555050565b6000806001611aed6122e1565b10611bc0576000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b611b3f6122e1565b8111611bb657600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000205482611ba1919061369b565b91508080611bae90613652565b915050611b37565b5080915050611c15565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808152602001908152602001600020549150505b919050565b611c2261293a565b73ffffffffffffffffffffffffffffffffffffffff16611c40611965565b73ffffffffffffffffffffffffffffffffffffffff1614611c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8d906138b9565b60405180910390fd5b80600b8190555050565b600f5481565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b611ce7611415565b15611d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1e90613483565b60405180910390fd5b60026001541415611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d64906134ef565b60405180910390fd5b6002600181905550611d7d612b4b565b60018081905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0d906139e9565b60405180910390fd5b60005b8151811015611f4d57600060046000848481518110611e3b57611e3a61350f565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085858581518110611ee257611ee161350f565b5b60200260200101516040518463ffffffff1660e01b8152600401611f08939291906135ec565b600060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505050508080611f4590613652565b915050611e19565b507f27c92910e65949ce9b76a0cfa7b2d74afd568f0df6812583dfc70d86051025548183604051611f7f9291906137af565b60405180910390a15050565b611f9361293a565b73ffffffffffffffffffffffffffffffffffffffff16611fb1611965565b73ffffffffffffffffffffffffffffffffffffffff1614612007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffe906138b9565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c5481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61207f61293a565b73ffffffffffffffffffffffffffffffffffffffff1661209d611965565b73ffffffffffffffffffffffffffffffffffffffff16146120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906138b9565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61213f61293a565b73ffffffffffffffffffffffffffffffffffffffff1661215d611965565b73ffffffffffffffffffffffffffffffffffffffff16146121b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121aa906138b9565b60405180910390fd5b80600f8190555050565b6121c561293a565b73ffffffffffffffffffffffffffffffffffffffff166121e3611965565b73ffffffffffffffffffffffffffffffffffffffff1614612239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612230906138b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a090613a7b565b60405180910390fd5b6122b2816129e4565b50565b60095481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600c54146122f657600c549050612386565b600f54600a544261230791906137df565b10156123165760009050612386565b6000601054600b546123289190613813565b600a544261233691906137df565b6123409190613aca565b141561234f5760019050612386565b6001601054600b546123619190613813565b600a544261236f91906137df565b6123799190613aca565b612383919061369b565b90505b90565b600061239433610be3565b509050600081146123a8576123a7612b4b565b5b60005b825181101561259a573373ffffffffffffffffffffffffffffffffffffffff16600460008584815181106123e2576123e161350f565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461246f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612466906135cc565b60405180910390fd5b6000600460008584815181106124885761248761350f565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303386858151811061252f5761252e61350f565b5b60200260200101516040518463ffffffff1660e01b8152600401612555939291906135ec565b600060405180830381600087803b15801561256f57600080fd5b505af1158015612583573d6000803e3d6000fd5b50505050808061259290613652565b9150506123ab565b5060006125a56122e1565b141561261f578151600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006125f66122e1565b8152602001908152602001600020600082825461261391906137df565b925050819055506128fd565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600161266c6122e1565b61267691906137df565b81526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006126d26122e1565b8152602001908152602001600020549050835182111561276c578351600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060016127396122e1565b61274391906137df565b8152602001908152602001600020600082825461276091906137df565b925050819055506128fa565b83518114156127e9578351600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006127c06122e1565b815260200190815260200160002060008282546127dd91906137df565b925050819055506128f9565b835182116128f857600082855161280091906137df565b905080855161280f91906137df565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600161285a6122e1565b61286491906137df565b8152602001908152602001600020600082825461288191906137df565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006128d26122e1565b815260200190815260200160002060008282546128ef91906137df565b92505081905550505b5b5b50505b7f27c92910e65949ce9b76a0cfa7b2d74afd568f0df6812583dfc70d8605102554823360405161292e9291906137af565b60405180910390a15050565b600033905090565b61294a611415565b612989576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298090613b47565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129cd61293a565b6040516129da9190613373565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612ab0611415565b15612af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae790613483565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b3461293a565b604051612b419190613373565b60405180910390a1565b6001612b556122e1565b11612b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8c90613bb3565b60405180910390fd5b600080612ba133610be3565b9150915080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001612bf16122e1565b612bfb91906137df565b8152602001908152602001600020819055506001612c176122e1565b612c2191906137df565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008211612ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9e90613c1f565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b8152600401612d0492919061391b565b6020604051808303816000875af1158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d479190613970565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b8152600401612da7939291906135ec565b6020604051808303816000875af1158015612dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dea9190613970565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e5182612e08565b810181811067ffffffffffffffff82111715612e7057612e6f612e19565b5b80604052505050565b6000612e83612def565b9050612e8f8282612e48565b919050565b600067ffffffffffffffff821115612eaf57612eae612e19565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b612ed881612ec5565b8114612ee357600080fd5b50565b600081359050612ef581612ecf565b92915050565b6000612f0e612f0984612e94565b612e79565b90508083825260208201905060208402830185811115612f3157612f30612ec0565b5b835b81811015612f5a5780612f468882612ee6565b845260208401935050602081019050612f33565b5050509392505050565b600082601f830112612f7957612f78612e03565b5b8135612f89848260208601612efb565b91505092915050565b600060208284031215612fa857612fa7612df9565b5b600082013567ffffffffffffffff811115612fc657612fc5612dfe565b5b612fd284828501612f64565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061300682612fdb565b9050919050565b61301681612ffb565b811461302157600080fd5b50565b6000813590506130338161300d565b92915050565b600080fd5b600067ffffffffffffffff82111561305957613058612e19565b5b61306282612e08565b9050602081019050919050565b82818337600083830152505050565b600061309161308c8461303e565b612e79565b9050828152602081018484840111156130ad576130ac613039565b5b6130b884828561306f565b509392505050565b600082601f8301126130d5576130d4612e03565b5b81356130e584826020860161307e565b91505092915050565b6000806000806080858703121561310857613107612df9565b5b600061311687828801613024565b945050602061312787828801613024565b935050604061313887828801612ee6565b925050606085013567ffffffffffffffff81111561315957613158612dfe565b5b613165878288016130c0565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131a681613171565b82525050565b60006020820190506131c1600083018461319d565b92915050565b600080604083850312156131de576131dd612df9565b5b60006131ec85828601613024565b92505060206131fd85828601612ee6565b9150509250929050565b61321081612ec5565b82525050565b600060208201905061322b6000830184613207565b92915050565b60006020828403121561324757613246612df9565b5b600061325584828501613024565b91505092915050565b60006040820190506132736000830185613207565b6132806020830184613207565b9392505050565b60006020828403121561329d5761329c612df9565b5b60006132ab84828501612ee6565b91505092915050565b60008115159050919050565b6132c9816132b4565b82525050565b60006020820190506132e460008301846132c0565b92915050565b6000819050919050565b600061330f61330a61330584612fdb565b6132ea565b612fdb565b9050919050565b6000613321826132f4565b9050919050565b600061333382613316565b9050919050565b61334381613328565b82525050565b600060208201905061335e600083018461333a565b92915050565b61336d81612ffb565b82525050565b60006020820190506133886000830184613364565b92915050565b600080604083850312156133a5576133a4612df9565b5b60006133b385828601613024565b925050602083013567ffffffffffffffff8111156133d4576133d3612dfe565b5b6133e085828601612f64565b9150509250929050565b60006133f582613316565b9050919050565b613405816133ea565b82525050565b600060208201905061342060008301846133fc565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061346d601083613426565b915061347882613437565b602082019050919050565b6000602082019050818103600083015261349c81613460565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006134d9601f83613426565b91506134e4826134a3565b602082019050919050565b60006020820190508181036000830152613508816134cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061354d8161300d565b92915050565b60006020828403121561356957613568612df9565b5b60006135778482850161353e565b91505092915050565b7f4e4f545f4f574e45520000000000000000000000000000000000000000000000600082015250565b60006135b6600983613426565b91506135c182613580565b602082019050919050565b600060208201905081810360008301526135e5816135a9565b9050919050565b60006060820190506136016000830186613364565b61360e6020830185613364565b61361b6040830184613207565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061365d82612ec5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156136905761368f613623565b5b600182019050919050565b60006136a682612ec5565b91506136b183612ec5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136e6576136e5613623565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61372681612ec5565b82525050565b6000613738838361371d565b60208301905092915050565b6000602082019050919050565b600061375c826136f1565b61376681856136fc565b93506137718361370d565b8060005b838110156137a2578151613789888261372c565b975061379483613744565b925050600181019050613775565b5085935050505092915050565b600060408201905081810360008301526137c98185613751565b90506137d86020830184613364565b9392505050565b60006137ea82612ec5565b91506137f583612ec5565b92508282101561380857613807613623565b5b828203905092915050565b600061381e82612ec5565b915061382983612ec5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561386257613861613623565b5b828202905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006138a3602083613426565b91506138ae8261386d565b602082019050919050565b600060208201905081810360008301526138d281613896565b9050919050565b6000815190506138e881612ecf565b92915050565b60006020828403121561390457613903612df9565b5b6000613912848285016138d9565b91505092915050565b60006040820190506139306000830185613364565b61393d6020830184613207565b9392505050565b61394d816132b4565b811461395857600080fd5b50565b60008151905061396a81613944565b92915050565b60006020828403121561398657613985612df9565b5b60006139948482850161395b565b91505092915050565b7f4e4f545f5448455f425249444745000000000000000000000000000000000000600082015250565b60006139d3600e83613426565b91506139de8261399d565b602082019050919050565b60006020820190508181036000830152613a02816139c6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a65602683613426565b9150613a7082613a09565b604082019050919050565b60006020820190508181036000830152613a9481613a58565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ad582612ec5565b9150613ae083612ec5565b925082613af057613aef613a9b565b5b828204905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613b31601483613426565b9150613b3c82613afb565b602082019050919050565b60006020820190508181036000830152613b6081613b24565b9050919050565b7f47454e455349535f65706f63684e756d00000000000000000000000000000000600082015250565b6000613b9d601083613426565b9150613ba882613b67565b602082019050919050565b60006020820190508181036000830152613bcc81613b90565b9050919050565b7f4e4f5448494e475f544f5f434c41494d00000000000000000000000000000000600082015250565b6000613c09601083613426565b9150613c1482613bd3565b602082019050919050565b60006020820190508181036000830152613c3881613bfc565b905091905056fea2646970667358221220d08980c1862c10b47ad52cfe9e3d52a7cdc0f5c9f84bc0c5880681b4418e44ca64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c80638da5cb5b1161013b578063bb1eb778116100b8578063eb31736e1161007c578063eb31736e1461066c578063f2f6596014610688578063f2fde38b146106a4578063f85be745146106c0578063fb3914d7146106de57610248565b8063bb1eb778146105ee578063c5882923146105f8578063c640855c14610614578063d26ef38d14610630578063e78cea921461064e57610248565b806393ff8d10116100ff57806393ff8d10146105365780639a5bfa2c14610566578063a06db7dc14610582578063a0f45b69146105a0578063a7f0b3de146105d057610248565b80638da5cb5b146104a45780638dd14802146104c2578063900cf0cf146104de57806391d4416b146104fc5780639378438e1461051a57610248565b80635aae426e116101c9578063715018a61161018d578063715018a614610438578063757991a8146104425780637a6aa76a146104605780637eac76211461047e5780638456cb591461049a57610248565b80635aae426e146103a85780635c975abb146103c65780636709de4f146103e45780636978b29614610400578063714f480e1461041c57610248565b80633699b2b2116102105780633699b2b2146103035780633dc524ce146103345780633f4ba83a146103525780634717607b1461035c5780635048a1361461037857610248565b80630f330b661461024d578063150b7a021461026957806317546065146102995780631b2cd65e146102c95780632f087501146102e7575b600080fd5b61026760048036038101906102629190612f92565b6106fc565b005b610283600480360381019061027e91906130ee565b610afb565b60405161029091906131ac565b60405180910390f35b6102b360048036038101906102ae91906131c7565b610b0f565b6040516102c09190613216565b60405180910390f35b6102d1610b34565b6040516102de9190613216565b60405180910390f35b61030160048036038101906102fc9190612f92565b610b3a565b005b61031d60048036038101906103189190613231565b610be3565b60405161032b92919061325e565b60405180910390f35b61033c6112aa565b6040516103499190613216565b60405180910390f35b61035a6112b0565b005b61037660048036038101906103719190613287565b611336565b005b610392600480360381019061038d9190613231565b6113bc565b60405161039f9190613216565b60405180910390f35b6103b06113d4565b6040516103bd9190613216565b60405180910390f35b6103ce611415565b6040516103db91906132cf565b60405180910390f35b6103fe60048036038101906103f99190613287565b61142c565b005b61041a60048036038101906104159190613287565b6114b2565b005b61043660048036038101906104319190613231565b611538565b005b61044061179c565b005b61044a611824565b6040516104579190613216565b60405180910390f35b610468611833565b6040516104759190613349565b60405180910390f35b61049860048036038101906104939190613287565b611859565b005b6104a26118df565b005b6104ac611965565b6040516104b99190613373565b60405180910390f35b6104dc60048036038101906104d79190613231565b61198e565b005b6104e6611a4e565b6040516104f39190613216565b60405180910390f35b610504611a54565b6040516105119190613216565b60405180910390f35b610534600480360381019061052f9190613287565b611a5a565b005b610550600480360381019061054b9190613231565b611ae0565b60405161055d9190613216565b60405180910390f35b610580600480360381019061057b9190613287565b611c1a565b005b61058a611ca0565b6040516105979190613216565b60405180910390f35b6105ba60048036038101906105b59190613287565b611ca6565b6040516105c79190613373565b60405180910390f35b6105d8611cd9565b6040516105e59190613216565b60405180910390f35b6105f6611cdf565b005b610612600480360381019061060d919061338e565b611d86565b005b61062e60048036038101906106299190613231565b611f8b565b005b61063861204b565b6040516106459190613216565b60405180910390f35b610656612051565b6040516106639190613373565b60405180910390f35b61068660048036038101906106819190613231565b612077565b005b6106a2600480360381019061069d9190613287565b612137565b005b6106be60048036038101906106b99190613231565b6121bd565b005b6106c86122b5565b6040516106d59190613216565b60405180910390f35b6106e66122bb565b6040516106f3919061340b565b60405180910390f35b610704611415565b15610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90613483565b60405180910390fd5b6002600154141561078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906134ef565b60405180910390fd5b600260018190555060005b81518110156109eb573373ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8484815181106108065761080561350f565b5b60200260200101516040518263ffffffff1660e01b815260040161082a9190613216565b602060405180830381865afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190613553565b73ffffffffffffffffffffffffffffffffffffffff16146108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b8906135cc565b60405180910390fd5b33600460008484815181106108d9576108d861350f565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e33308585815181106109805761097f61350f565b5b60200260200101516040518463ffffffff1660e01b81526004016109a6939291906135ec565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b5050505080806109e390613652565b915050610795565b5060006109f733611ae0565b1415610a4957610a056122e1565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8051600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610a946122e1565b81526020019081526020016000206000828254610ab1919061369b565b925050819055507f486ed571da4f82b733e4a2b512dd11f25f1213e6d66b6bc78812b03ff3320d768133604051610ae99291906137af565b60405180910390a16001808190555050565b600063150b7a0260e01b9050949350505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600e5481565b610b42611415565b15610b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7990613483565b60405180910390fd5b60026001541415610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf906134ef565b60405180910390fd5b6002600181905550610bd981612389565b6001808190555050565b6000806000806000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b610c366122e1565b811015610cae57600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000205484610c99919061369b565b93508080610ca690613652565b915050610c2e565b50600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411158015610d095750600d54610d066122e1565b11155b15610e02576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b610d5b6122e1565b811015610dfc57806001610d6d6122e1565b610d7791906137df565b610d8191906137df565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054610ddc9190613813565b83610de7919061369b565b92508080610df490613652565b915050610d53565b50610f3b565b600d54610e0d6122e1565b10158015610e5b5750600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15610f3a576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b600d54811015610f385780600d54610ebd91906137df565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054610f189190613813565b83610f23919061369b565b92508080610f3090613652565b915050610ea5565b505b5b600d54610f466122e1565b118015610f945750600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1561108d576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b610fe66122e1565b81101561108757806001610ff86122e1565b61100291906137df565b61100c91906137df565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020546110679190613813565b82611072919061369b565b9150808061107f90613652565b915050610fde565b50611261565b600d546110986122e1565b1180156110e55750600d54600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561126057600080600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b6111386122e1565b81101561125a5780600161114a6122e1565b61115491906137df565b61115e91906137df565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020546111b99190613813565b826111c4919061369b565b9150600d548110156112475780600d546111de91906137df565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020546112399190613813565b8261124491906137df565b91505b808061125290613652565b915050611130565b50809150505b5b600161126b6122e1565b111561129e5780600e5461127f9190613813565b8260095461128d9190613813565b611297919061369b565b93506112a3565b600093505b5050915091565b600d5481565b6112b861293a565b73ffffffffffffffffffffffffffffffffffffffff166112d6611965565b73ffffffffffffffffffffffffffffffffffffffff161461132c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611323906138b9565b60405180910390fd5b611334612942565b565b61133e61293a565b73ffffffffffffffffffffffffffffffffffffffff1661135c611965565b73ffffffffffffffffffffffffffffffffffffffff16146113b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a9906138b9565b60405180910390fd5b80600e8190555050565b60036020528060005260406000206000915090505481565b6000600a54426113e491906137df565b6113ec611824565b601054600b546113fc9190613813565b6114069190613813565b61141091906137df565b905090565b6000600260009054906101000a900460ff16905090565b61143461293a565b73ffffffffffffffffffffffffffffffffffffffff16611452611965565b73ffffffffffffffffffffffffffffffffffffffff16146114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149f906138b9565b60405180910390fd5b80600d8190555050565b6114ba61293a565b73ffffffffffffffffffffffffffffffffffffffff166114d8611965565b73ffffffffffffffffffffffffffffffffffffffff161461152e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611525906138b9565b60405180910390fd5b8060098190555050565b61154061293a565b73ffffffffffffffffffffffffffffffffffffffff1661155e611965565b73ffffffffffffffffffffffffffffffffffffffff16146115b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ab906138b9565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116119190613373565b602060405180830381865afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165291906138ee565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b81526004016116b192919061391b565b6020604051808303816000875af11580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190613970565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3084846040518463ffffffff1660e01b8152600401611754939291906135ec565b6020604051808303816000875af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190613970565b505050565b6117a461293a565b73ffffffffffffffffffffffffffffffffffffffff166117c2611965565b73ffffffffffffffffffffffffffffffffffffffff1614611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f906138b9565b60405180910390fd5b61182260006129e4565b565b600061182e6122e1565b905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61186161293a565b73ffffffffffffffffffffffffffffffffffffffff1661187f611965565b73ffffffffffffffffffffffffffffffffffffffff16146118d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cc906138b9565b60405180910390fd5b80600a8190555050565b6118e761293a565b73ffffffffffffffffffffffffffffffffffffffff16611905611965565b73ffffffffffffffffffffffffffffffffffffffff161461195b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611952906138b9565b60405180910390fd5b611963612aa8565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61199661293a565b73ffffffffffffffffffffffffffffffffffffffff166119b4611965565b73ffffffffffffffffffffffffffffffffffffffff1614611a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a01906138b9565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b5481565b60105481565b611a6261293a565b73ffffffffffffffffffffffffffffffffffffffff16611a80611965565b73ffffffffffffffffffffffffffffffffffffffff1614611ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acd906138b9565b60405180910390fd5b80600c8190555050565b6000806001611aed6122e1565b10611bc0576000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b611b3f6122e1565b8111611bb657600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000205482611ba1919061369b565b91508080611bae90613652565b915050611b37565b5080915050611c15565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808152602001908152602001600020549150505b919050565b611c2261293a565b73ffffffffffffffffffffffffffffffffffffffff16611c40611965565b73ffffffffffffffffffffffffffffffffffffffff1614611c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8d906138b9565b60405180910390fd5b80600b8190555050565b600f5481565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b611ce7611415565b15611d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1e90613483565b60405180910390fd5b60026001541415611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d64906134ef565b60405180910390fd5b6002600181905550611d7d612b4b565b60018081905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0d906139e9565b60405180910390fd5b60005b8151811015611f4d57600060046000848481518110611e3b57611e3a61350f565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3085858581518110611ee257611ee161350f565b5b60200260200101516040518463ffffffff1660e01b8152600401611f08939291906135ec565b600060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505050508080611f4590613652565b915050611e19565b507f27c92910e65949ce9b76a0cfa7b2d74afd568f0df6812583dfc70d86051025548183604051611f7f9291906137af565b60405180910390a15050565b611f9361293a565b73ffffffffffffffffffffffffffffffffffffffff16611fb1611965565b73ffffffffffffffffffffffffffffffffffffffff1614612007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffe906138b9565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c5481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61207f61293a565b73ffffffffffffffffffffffffffffffffffffffff1661209d611965565b73ffffffffffffffffffffffffffffffffffffffff16146120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906138b9565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61213f61293a565b73ffffffffffffffffffffffffffffffffffffffff1661215d611965565b73ffffffffffffffffffffffffffffffffffffffff16146121b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121aa906138b9565b60405180910390fd5b80600f8190555050565b6121c561293a565b73ffffffffffffffffffffffffffffffffffffffff166121e3611965565b73ffffffffffffffffffffffffffffffffffffffff1614612239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612230906138b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a090613a7b565b60405180910390fd5b6122b2816129e4565b50565b60095481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600c54146122f657600c549050612386565b600f54600a544261230791906137df565b10156123165760009050612386565b6000601054600b546123289190613813565b600a544261233691906137df565b6123409190613aca565b141561234f5760019050612386565b6001601054600b546123619190613813565b600a544261236f91906137df565b6123799190613aca565b612383919061369b565b90505b90565b600061239433610be3565b509050600081146123a8576123a7612b4b565b5b60005b825181101561259a573373ffffffffffffffffffffffffffffffffffffffff16600460008584815181106123e2576123e161350f565b5b6020026020010151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461246f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612466906135cc565b60405180910390fd5b6000600460008584815181106124885761248761350f565b5b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e303386858151811061252f5761252e61350f565b5b60200260200101516040518463ffffffff1660e01b8152600401612555939291906135ec565b600060405180830381600087803b15801561256f57600080fd5b505af1158015612583573d6000803e3d6000fd5b50505050808061259290613652565b9150506123ab565b5060006125a56122e1565b141561261f578151600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006125f66122e1565b8152602001908152602001600020600082825461261391906137df565b925050819055506128fd565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600161266c6122e1565b61267691906137df565b81526020019081526020016000205490506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006126d26122e1565b8152602001908152602001600020549050835182111561276c578351600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060016127396122e1565b61274391906137df565b8152602001908152602001600020600082825461276091906137df565b925050819055506128fa565b83518114156127e9578351600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006127c06122e1565b815260200190815260200160002060008282546127dd91906137df565b925050819055506128f9565b835182116128f857600082855161280091906137df565b905080855161280f91906137df565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600161285a6122e1565b61286491906137df565b8152602001908152602001600020600082825461288191906137df565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006128d26122e1565b815260200190815260200160002060008282546128ef91906137df565b92505081905550505b5b5b50505b7f27c92910e65949ce9b76a0cfa7b2d74afd568f0df6812583dfc70d8605102554823360405161292e9291906137af565b60405180910390a15050565b600033905090565b61294a611415565b612989576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298090613b47565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6129cd61293a565b6040516129da9190613373565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612ab0611415565b15612af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae790613483565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b3461293a565b604051612b419190613373565b60405180910390a1565b6001612b556122e1565b11612b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8c90613bb3565b60405180910390fd5b600080612ba133610be3565b9150915080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001612bf16122e1565b612bfb91906137df565b8152602001908152602001600020819055506001612c176122e1565b612c2191906137df565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008211612ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9e90613c1f565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330846040518363ffffffff1660e01b8152600401612d0492919061391b565b6020604051808303816000875af1158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d479190613970565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b8152600401612da7939291906135ec565b6020604051808303816000875af1158015612dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dea9190613970565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e5182612e08565b810181811067ffffffffffffffff82111715612e7057612e6f612e19565b5b80604052505050565b6000612e83612def565b9050612e8f8282612e48565b919050565b600067ffffffffffffffff821115612eaf57612eae612e19565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b612ed881612ec5565b8114612ee357600080fd5b50565b600081359050612ef581612ecf565b92915050565b6000612f0e612f0984612e94565b612e79565b90508083825260208201905060208402830185811115612f3157612f30612ec0565b5b835b81811015612f5a5780612f468882612ee6565b845260208401935050602081019050612f33565b5050509392505050565b600082601f830112612f7957612f78612e03565b5b8135612f89848260208601612efb565b91505092915050565b600060208284031215612fa857612fa7612df9565b5b600082013567ffffffffffffffff811115612fc657612fc5612dfe565b5b612fd284828501612f64565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061300682612fdb565b9050919050565b61301681612ffb565b811461302157600080fd5b50565b6000813590506130338161300d565b92915050565b600080fd5b600067ffffffffffffffff82111561305957613058612e19565b5b61306282612e08565b9050602081019050919050565b82818337600083830152505050565b600061309161308c8461303e565b612e79565b9050828152602081018484840111156130ad576130ac613039565b5b6130b884828561306f565b509392505050565b600082601f8301126130d5576130d4612e03565b5b81356130e584826020860161307e565b91505092915050565b6000806000806080858703121561310857613107612df9565b5b600061311687828801613024565b945050602061312787828801613024565b935050604061313887828801612ee6565b925050606085013567ffffffffffffffff81111561315957613158612dfe565b5b613165878288016130c0565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131a681613171565b82525050565b60006020820190506131c1600083018461319d565b92915050565b600080604083850312156131de576131dd612df9565b5b60006131ec85828601613024565b92505060206131fd85828601612ee6565b9150509250929050565b61321081612ec5565b82525050565b600060208201905061322b6000830184613207565b92915050565b60006020828403121561324757613246612df9565b5b600061325584828501613024565b91505092915050565b60006040820190506132736000830185613207565b6132806020830184613207565b9392505050565b60006020828403121561329d5761329c612df9565b5b60006132ab84828501612ee6565b91505092915050565b60008115159050919050565b6132c9816132b4565b82525050565b60006020820190506132e460008301846132c0565b92915050565b6000819050919050565b600061330f61330a61330584612fdb565b6132ea565b612fdb565b9050919050565b6000613321826132f4565b9050919050565b600061333382613316565b9050919050565b61334381613328565b82525050565b600060208201905061335e600083018461333a565b92915050565b61336d81612ffb565b82525050565b60006020820190506133886000830184613364565b92915050565b600080604083850312156133a5576133a4612df9565b5b60006133b385828601613024565b925050602083013567ffffffffffffffff8111156133d4576133d3612dfe565b5b6133e085828601612f64565b9150509250929050565b60006133f582613316565b9050919050565b613405816133ea565b82525050565b600060208201905061342060008301846133fc565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600061346d601083613426565b915061347882613437565b602082019050919050565b6000602082019050818103600083015261349c81613460565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006134d9601f83613426565b91506134e4826134a3565b602082019050919050565b60006020820190508181036000830152613508816134cc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061354d8161300d565b92915050565b60006020828403121561356957613568612df9565b5b60006135778482850161353e565b91505092915050565b7f4e4f545f4f574e45520000000000000000000000000000000000000000000000600082015250565b60006135b6600983613426565b91506135c182613580565b602082019050919050565b600060208201905081810360008301526135e5816135a9565b9050919050565b60006060820190506136016000830186613364565b61360e6020830185613364565b61361b6040830184613207565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061365d82612ec5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156136905761368f613623565b5b600182019050919050565b60006136a682612ec5565b91506136b183612ec5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136e6576136e5613623565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61372681612ec5565b82525050565b6000613738838361371d565b60208301905092915050565b6000602082019050919050565b600061375c826136f1565b61376681856136fc565b93506137718361370d565b8060005b838110156137a2578151613789888261372c565b975061379483613744565b925050600181019050613775565b5085935050505092915050565b600060408201905081810360008301526137c98185613751565b90506137d86020830184613364565b9392505050565b60006137ea82612ec5565b91506137f583612ec5565b92508282101561380857613807613623565b5b828203905092915050565b600061381e82612ec5565b915061382983612ec5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561386257613861613623565b5b828202905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006138a3602083613426565b91506138ae8261386d565b602082019050919050565b600060208201905081810360008301526138d281613896565b9050919050565b6000815190506138e881612ecf565b92915050565b60006020828403121561390457613903612df9565b5b6000613912848285016138d9565b91505092915050565b60006040820190506139306000830185613364565b61393d6020830184613207565b9392505050565b61394d816132b4565b811461395857600080fd5b50565b60008151905061396a81613944565b92915050565b60006020828403121561398657613985612df9565b5b60006139948482850161395b565b91505092915050565b7f4e4f545f5448455f425249444745000000000000000000000000000000000000600082015250565b60006139d3600e83613426565b91506139de8261399d565b602082019050919050565b60006020820190508181036000830152613a02816139c6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613a65602683613426565b9150613a7082613a09565b604082019050919050565b60006020820190508181036000830152613a9481613a58565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ad582612ec5565b9150613ae083612ec5565b925082613af057613aef613a9b565b5b828204905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613b31601483613426565b9150613b3c82613afb565b602082019050919050565b60006020820190508181036000830152613b6081613b24565b9050919050565b7f47454e455349535f65706f63684e756d00000000000000000000000000000000600082015250565b6000613b9d601083613426565b9150613ba882613b67565b602082019050919050565b60006020820190508181036000830152613bcc81613b90565b9050919050565b7f4e4f5448494e475f544f5f434c41494d00000000000000000000000000000000600082015250565b6000613c09601083613426565b9150613c1482613bd3565b602082019050919050565b60006020820190508181036000830152613c3881613bfc565b905091905056fea2646970667358221220d08980c1862c10b47ad52cfe9e3d52a7cdc0f5c9f84bc0c5880681b4418e44ca64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "boardShip(uint256[])": {
        "params": {
          "_tokenIds": "Ids of Realms"
        }
      },
      "bridgeWithdraw(address,uint256[])": {
        "params": {
          "_tokenIds": "Ids of Realms"
        }
      },
      "exitShip(uint256[])": {
        "params": {
          "_tokenIds": "Ids of Realms"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "boardShip(uint256[])": {
        "notice": "Boards the Ship (Stakes). Sets ownership of Token to Staker. Transfers NFT to Contract. Set's epoch date, Set's number of Realms staked in the Epoch."
      },
      "bridgeWithdraw(address,uint256[])": {
        "notice": "Called only by future Bridge contract to withdraw the Realms"
      },
      "claimLords()": {
        "notice": "Claims all available Lords for Owner."
      },
      "exitShip(uint256[])": {
        "notice": "Exits the Ship"
      },
      "lordsAvailable(address)": {
        "notice": "Lords available for the player"
      },
      "withdrawAllLords(address)": {
        "notice": "Withdraw all Lords"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 122,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 574,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "epochClaimed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 578,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "ownership",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 584,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "realmsStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 587,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "lordsToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(LordsToken)1694"
      },
      {
        "astId": 590,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "realmsToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(RealmsToken)1701"
      },
      {
        "astId": 592,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "bridge",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 594,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "lordsPerRealm",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 596,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "genesis",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 598,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "epoch",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 600,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "finalAge",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 602,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "halvingAge",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 604,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "halvingAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 606,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "gracePeriod",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 609,
        "contract": "contracts/pre/Journey.sol:Journey",
        "label": "epochLengh",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LordsToken)1694": {
        "encoding": "inplace",
        "label": "contract LordsToken",
        "numberOfBytes": "20"
      },
      "t_contract(RealmsToken)1701": {
        "encoding": "inplace",
        "label": "contract RealmsToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}